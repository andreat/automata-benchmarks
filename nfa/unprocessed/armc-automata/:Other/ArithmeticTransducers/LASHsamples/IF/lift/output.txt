4 variable(s).
   initial value(s):
      x3 = 2.
      x2 = 0.
      x1 = 1.
      x0 = 1.

4 process(es).

process #0 (p_init):
   2 states(s).
   initial state is #0.

   atomic state #0:
      2 outgoing transition(s):
         ---> #0: x3 <= 1. 1 operations: 
 		x3 := x3 + 1.
         ---> #1: skip
   state #1:
      0 outgoing transition(s):

process #1 (motor):
   3 states(s).
   initial state is #0.

   state #0:
      2 outgoing transition(s):
         ---> #1: (x2 <= 2.) AND (-x2 <= -2.)         ---> #2: (x2 <= 1.) AND (-x2 <= -1.)
   atomic state #1:
      1 outgoing transition(s):
         ---> #0:  2 operations: 
 		x0 := x0 - 1.
 		x2 := 0.

   atomic state #2:
      1 outgoing transition(s):
         ---> #0:  2 operations: 
 		x0 := x0 + 1.
 		x2 := 0.

process #2 (control):
   7 states(s).
   initial state is #0.

   state #0:
      1 outgoing transition(s):
         ---> #1: -x3 <= -2.
   state #1:
      3 outgoing transition(s):
         ---> #2: -x0 + x1 <= -1. 1 operations: 
 		x2 := 2.
         ---> #3: x0 - x1 <= -1. 1 operations: 
 		x2 := 1.
         ---> #4: (x0 - x1 <= 0.) AND (-x0 + x1 <= 0.)
   state #2:
      1 outgoing transition(s):
         ---> #1: (x2 <= 0.) AND (-x2 <= 0.)
   state #3:
      1 outgoing transition(s):
         ---> #1: (x2 <= 0.) AND (-x2 <= 0.)
   atomic state #4:
      3 outgoing transition(s):
         ---> #1: skip         ---> #5: x1 - x3 <= -1.         ---> #6: -x1 <= -2.
   atomic state #5:
      1 outgoing transition(s):
         ---> #4:  1 operations: 
 		x1 := x1 + 1.

   atomic state #6:
      1 outgoing transition(s):
         ---> #4:  1 operations: 
 		x1 := x1 - 1.

process #3 (observer):
   2 states(s).
   initial state is #0.

   state #0:
      1 outgoing transition(s):
         ---> #1: -x3 <= -2.
   atomic state #1:
      2 outgoing transition(s):
         ---> #0: assert : not( (x0 <= 0.) OR (-x0 + x3 <= -1.) )         ---> #0: skip
meta-transition:
   head: (#2.1, #1.0).
   operations:
      x0 - x1 <= -1. 1 operations: 
 		x2 := 1.
      (x2 <= 1.) AND (-x2 <= -1.)       2 operations: 
 		x0 := x0 + 1.
 		x2 := 0.
      (x2 <= 0.) AND (-x2 <= 0.)
meta-transition:
   head: (#2.1, #1.0).
   operations:
      -x0 + x1 <= -1. 1 operations: 
 		x2 := 2.
      (x2 <= 2.) AND (-x2 <= -2.)       2 operations: 
 		x0 := x0 - 1.
 		x2 := 0.
      (x2 <= 0.) AND (-x2 <= 0.)
meta-transition:
   head: (#2.4).
   operations:
      -x1 <= -2.       1 operations: 
 		x1 := x1 - 1.

meta-transition:
   head: (#2.4).
   operations:
      x1 - x3 <= -1.       1 operations: 
 		x1 := x1 + 1.

meta-transition:
   head: (#0.0).
   operations:
      x3 <= 1. 1 operations: 
 		x3 := x3 + 1.

end of program.
