%% Automatically generated by FSA Utilities.
%% For more info, cf. http://www.let.rug.nl/~vannoord/Fsa/

fa(
%begin sigma and symbols
r(fsa_preds),
%end sigma and symbols
130, % number of states
[ % begin start states
0
], % end start states
[ % begin final states
1,
2,
3,
4,
5,
6,
7,
8,
9,
10,
11,
12,
13,
14,
15,
16,
17,
18,
19,
20,
21,
22,
23,
24,
25,
26,
27,
28,
29,
30,
31,
32,
33,
34,
35,
36,
37,
38,
39,
40,
41,
42,
43,
44,
45,
46,
47,
48,
49,
50,
51,
52,
53,
54,
55,
56,
57,
58,
59,
60,
61,
62,
63,
64,
65,
66,
67,
68,
69,
70,
71,
72,
73,
74,
75,
76,
77,
78,
79,
80,
81,
82,
83,
84,
85,
86,
87,
88,
89,
90,
91,
92,
93,
94,
95,
96,
97,
98,
99,
100,
101,
102,
103,
104,
105,
106,
107,
108,
109,
110,
111,
112,
113,
114,
115,
116,
117,
118,
119,
120,
121,
122,
123,
124,
125,
126
], % end final states
[ % begin transitions
trans(0,n,128),
trans(0,in([e,u]),1),
trans(0,not_in([e,n,u]),129),
trans(1,not_in([]),1),
trans(2,!,3),
trans(2,not_in([!]),1),
trans(3,m_f,4),
trans(3,n_f,5),
trans(3,not_in([m_f,n_f]),1),
trans(4,n_f,6),
trans(4,o_f,7),
trans(4,not_in([n_f,o_f]),1),
trans(5,o_f,8),
trans(5,not_in([o_f]),1),
trans(6,/,9),
trans(6,o_f,10),
trans(6,in([x,y,z]),11),
trans(6,not_in([/,o_f,x,y,z]),1),
trans(7,/,12),
trans(7,in([x,y,z]),7),
trans(7,not_in([/,x,y,z]),1),
trans(8,/,13),
trans(8,in([x,y,z]),8),
trans(8,not_in([/,x,y,z]),1),
trans(9,#,14),
trans(9,not_in([#]),1),
trans(10,i,15),
trans(10,in([x,y,z]),10),
trans(10,not_in([i,x,y,z]),1),
trans(11,/,9),
trans(11,in([x,y,z]),11),
trans(11,not_in([/,x,y,z]),1),
trans(12,#,16),
trans(12,not_in([#]),1),
trans(13,#,17),
trans(13,not_in([#]),1),
trans(14,'|',18),
trans(14,in([x,y,z]),14),
trans(14,not_in([x,y,z,'|']),1),
trans(15,a,19),
trans(15,not_in([a]),1),
trans(16,'|',20),
trans(16,in([x,y,z]),16),
trans(16,not_in([x,y,z,'|']),1),
trans(17,'|',21),
trans(17,in([x,y,z]),17),
trans(17,not_in([x,y,z,'|']),1),
trans(18,o_t,22),
trans(18,not_in([o_t]),1),
trans(19,b,23),
trans(19,not_in([b]),1),
trans(20,n_t,24),
trans(20,not_in([n_t]),1),
trans(21,m_t,25),
trans(21,not_in([m_t]),1),
trans(22,/,26),
trans(22,a,27),
trans(22,b,28),
trans(22,l,29),
trans(22,in([x,y,z]),30),
trans(22,not_in([/,a,b,l,x,y,z]),1),
trans(23,/,31),
trans(23,not_in([/]),1),
trans(24,/,32),
trans(24,a,33),
trans(24,b,34),
trans(24,l,35),
trans(24,in([x,y,z]),36),
trans(24,not_in([/,a,b,l,x,y,z]),1),
trans(25,/,37),
trans(25,a,38),
trans(25,b,39),
trans(25,l,40),
trans(25,in([x,y,z]),41),
trans(25,not_in([/,a,b,l,x,y,z]),1),
trans(26,/,26),
trans(26,b,28),
trans(26,l,42),
trans(26,in([x,y,z]),43),
trans(26,not_in([/,b,l,x,y,z]),1),
trans(27,/,44),
trans(27,not_in([/]),1),
trans(28,/,45),
trans(28,not_in([/]),1),
trans(29,i,46),
trans(29,in([x,y,z]),29),
trans(29,not_in([i,x,y,z]),1),
trans(30,/,26),
trans(30,a,27),
trans(30,b,28),
trans(30,in([x,y,z]),30),
trans(30,not_in([/,a,b,x,y,z]),1),
trans(31,#,47),
trans(31,not_in([#]),1),
trans(32,/,32),
trans(32,b,34),
trans(32,l,48),
trans(32,in([x,y,z]),49),
trans(32,not_in([/,b,l,x,y,z]),1),
trans(33,/,50),
trans(33,not_in([/]),1),
trans(34,/,51),
trans(34,not_in([/]),1),
trans(35,i,52),
trans(35,in([x,y,z]),35),
trans(35,not_in([i,x,y,z]),1),
trans(36,/,32),
trans(36,a,33),
trans(36,b,34),
trans(36,in([x,y,z]),36),
trans(36,not_in([/,a,b,x,y,z]),1),
trans(37,/,37),
trans(37,b,39),
trans(37,l,53),
trans(37,in([x,y,z]),54),
trans(37,not_in([/,b,l,x,y,z]),1),
trans(38,/,55),
trans(38,not_in([/]),1),
trans(39,/,56),
trans(39,not_in([/]),1),
trans(40,i,57),
trans(40,in([x,y,z]),40),
trans(40,not_in([i,x,y,z]),1),
trans(41,/,37),
trans(41,a,38),
trans(41,b,39),
trans(41,in([x,y,z]),41),
trans(41,not_in([/,a,b,x,y,z]),1),
trans(42,i,58),
trans(42,in([x,y,z]),42),
trans(42,not_in([i,x,y,z]),1),
trans(43,/,26),
trans(43,b,28),
trans(43,in([x,y,z]),43),
trans(43,not_in([/,b,x,y,z]),1),
trans(44,/,44),
trans(44,l,59),
trans(44,in([x,y,z]),60),
trans(44,not_in([/,l,x,y,z]),1),
trans(45,a,61),
trans(45,l,62),
trans(45,in([x,y,z]),63),
trans(45,not_in([a,l,x,y,z]),1),
trans(46,/,64),
trans(46,a,65),
trans(46,b,66),
trans(46,not_in([/,a,b]),1),
trans(47,l,67),
trans(47,not_in([l]),1),
trans(48,i,68),
trans(48,in([x,y,z]),48),
trans(48,not_in([i,x,y,z]),1),
trans(49,/,32),
trans(49,b,34),
trans(49,in([x,y,z]),49),
trans(49,not_in([/,b,x,y,z]),1),
trans(50,/,50),
trans(50,l,69),
trans(50,in([x,y,z]),70),
trans(50,not_in([/,l,x,y,z]),1),
trans(51,a,71),
trans(51,l,72),
trans(51,in([x,y,z]),73),
trans(51,not_in([a,l,x,y,z]),1),
trans(52,/,74),
trans(52,a,75),
trans(52,b,76),
trans(52,not_in([/,a,b]),1),
trans(53,i,77),
trans(53,in([x,y,z]),53),
trans(53,not_in([i,x,y,z]),1),
trans(54,/,37),
trans(54,b,39),
trans(54,in([x,y,z]),54),
trans(54,not_in([/,b,x,y,z]),1),
trans(55,/,55),
trans(55,l,78),
trans(55,in([x,y,z]),79),
trans(55,not_in([/,l,x,y,z]),1),
trans(56,a,80),
trans(56,l,81),
trans(56,in([x,y,z]),82),
trans(56,not_in([a,l,x,y,z]),1),
trans(57,/,83),
trans(57,a,84),
trans(57,b,85),
trans(57,not_in([/,a,b]),1),
trans(58,/,64),
trans(58,b,66),
trans(58,not_in([/,b]),1),
trans(59,i,86),
trans(59,in([x,y,z]),59),
trans(59,not_in([i,x,y,z]),1),
trans(60,/,44),
trans(60,in([x,y,z]),60),
trans(60,not_in([/,x,y,z]),1),
trans(61,/,87),
trans(61,not_in([/]),1),
trans(62,i,88),
trans(62,in([x,y,z]),62),
trans(62,not_in([i,x,y,z]),1),
trans(63,a,61),
trans(63,in([x,y,z]),63),
trans(63,not_in([a,x,y,z]),1),
trans(64,b,66),
trans(64,in([/,x,y,z]),64),
trans(64,not_in([/,b,x,y,z]),1),
trans(65,/,89),
trans(65,not_in([/]),1),
trans(66,/,90),
trans(66,not_in([/]),1),
trans(67,'|',127),
trans(67,not_in(['|']),1),
trans(68,/,74),
trans(68,b,76),
trans(68,not_in([/,b]),1),
trans(69,i,91),
trans(69,in([x,y,z]),69),
trans(69,not_in([i,x,y,z]),1),
trans(70,/,50),
trans(70,in([x,y,z]),70),
trans(70,not_in([/,x,y,z]),1),
trans(71,/,92),
trans(71,not_in([/]),1),
trans(72,i,93),
trans(72,in([x,y,z]),72),
trans(72,not_in([i,x,y,z]),1),
trans(73,a,71),
trans(73,in([x,y,z]),73),
trans(73,not_in([a,x,y,z]),1),
trans(74,b,76),
trans(74,in([/,x,y,z]),74),
trans(74,not_in([/,b,x,y,z]),1),
trans(75,/,94),
trans(75,not_in([/]),1),
trans(76,/,95),
trans(76,not_in([/]),1),
trans(77,/,83),
trans(77,b,85),
trans(77,not_in([/,b]),1),
trans(78,i,84),
trans(78,in([x,y,z]),78),
trans(78,not_in([i,x,y,z]),1),
trans(79,/,55),
trans(79,in([x,y,z]),79),
trans(79,not_in([/,x,y,z]),1),
trans(80,/,96),
trans(80,not_in([/]),1),
trans(81,i,97),
trans(81,in([x,y,z]),81),
trans(81,not_in([i,x,y,z]),1),
trans(82,a,80),
trans(82,in([x,y,z]),82),
trans(82,not_in([a,x,y,z]),1),
trans(83,b,85),
trans(83,in([/,x,y,z]),83),
trans(83,not_in([/,b,x,y,z]),1),
trans(84,/,98),
trans(84,b,99),
trans(84,not_in([/,b]),1),
trans(85,/,100),
trans(85,not_in([/]),1),
trans(86,/,89),
trans(86,b,101),
trans(86,not_in([/,b]),1),
trans(87,/,87),
trans(87,l,102),
trans(87,in([x,y,z]),103),
trans(87,not_in([/,l,x,y,z]),1),
trans(88,a,104),
trans(88,not_in([a]),1),
trans(89,b,101),
trans(89,in([/,x,y,z]),89),
trans(89,not_in([/,b,x,y,z]),1),
trans(90,a,105),
trans(90,in([x,y,z]),90),
trans(90,not_in([a,x,y,z]),1),
trans(91,/,94),
trans(91,b,106),
trans(91,not_in([/,b]),1),
trans(92,/,92),
trans(92,l,107),
trans(92,in([x,y,z]),108),
trans(92,not_in([/,l,x,y,z]),1),
trans(93,a,109),
trans(93,not_in([a]),1),
trans(94,b,106),
trans(94,in([/,x,y,z]),94),
trans(94,not_in([/,b,x,y,z]),1),
trans(95,a,110),
trans(95,in([x,y,z]),95),
trans(95,not_in([a,x,y,z]),1),
trans(96,/,96),
trans(96,l,111),
trans(96,in([x,y,z]),112),
trans(96,not_in([/,l,x,y,z]),1),
trans(97,a,113),
trans(97,not_in([a]),1),
trans(98,b,99),
trans(98,in([/,x,y,z]),98),
trans(98,not_in([/,b,x,y,z]),1),
trans(99,/,114),
trans(99,not_in([/]),1),
trans(100,a,115),
trans(100,in([x,y,z]),100),
trans(100,not_in([a,x,y,z]),1),
trans(101,/,116),
trans(101,not_in([/]),1),
trans(102,i,104),
trans(102,in([x,y,z]),102),
trans(102,not_in([i,x,y,z]),1),
trans(103,/,87),
trans(103,in([x,y,z]),103),
trans(103,not_in([/,x,y,z]),1),
trans(104,/,117),
trans(104,not_in([/]),1),
trans(105,/,118),
trans(105,not_in([/]),1),
trans(106,/,119),
trans(106,not_in([/]),1),
trans(107,i,109),
trans(107,in([x,y,z]),107),
trans(107,not_in([i,x,y,z]),1),
trans(108,/,92),
trans(108,in([x,y,z]),108),
trans(108,not_in([/,x,y,z]),1),
trans(109,/,120),
trans(109,not_in([/]),1),
trans(110,/,121),
trans(110,not_in([/]),1),
trans(111,i,113),
trans(111,in([x,y,z]),111),
trans(111,not_in([i,x,y,z]),1),
trans(112,/,96),
trans(112,in([x,y,z]),112),
trans(112,not_in([/,x,y,z]),1),
trans(113,/,122),
trans(113,not_in([/]),1),
trans(114,m_f,67),
trans(114,not_in([m_f]),1),
trans(115,/,123),
trans(115,not_in([/]),1),
trans(116,o_f,67),
trans(116,not_in([o_f]),1),
trans(117,/,117),
trans(117,o_f,67),
trans(117,in([x,y,z]),124),
trans(117,not_in([/,o_f,x,y,z]),1),
trans(118,o_f,67),
trans(118,in([/,x,y,z]),118),
trans(118,not_in([/,o_f,x,y,z]),1),
trans(119,n_f,67),
trans(119,not_in([n_f]),1),
trans(120,/,120),
trans(120,n_f,67),
trans(120,in([x,y,z]),125),
trans(120,not_in([/,n_f,x,y,z]),1),
trans(121,n_f,67),
trans(121,in([/,x,y,z]),121),
trans(121,not_in([/,n_f,x,y,z]),1),
trans(122,/,122),
trans(122,m_f,67),
trans(122,in([x,y,z]),126),
trans(122,not_in([/,m_f,x,y,z]),1),
trans(123,m_f,67),
trans(123,in([/,x,y,z]),123),
trans(123,not_in([/,m_f,x,y,z]),1),
trans(124,/,117),
trans(124,in([x,y,z]),124),
trans(124,not_in([/,x,y,z]),1),
trans(125,/,120),
trans(125,in([x,y,z]),125),
trans(125,not_in([/,x,y,z]),1),
trans(126,/,122),
trans(126,in([x,y,z]),126),
trans(126,not_in([/,x,y,z]),1),
trans(127,not_in([]),1),
trans(128,l9n,2),
trans(129,l9n,1)
], % end transitions
[]). % jumps

:- fsa_globals:fsa_global_set(regex,&(~(file(good_result)),file(bad_basis))).
:- dynamic current_state/6.
current_state(0,200,2.0E+02,'21525',green,flat).
current_state(1,320,-2.2E+03,'21526',red,'ridge -borderwidth 5').
current_state(128,320,2.0E+02,'21527','SteelBlue1',flat).
current_state(2,440,2.0E+02,'21528',red,'ridge -borderwidth 5').
current_state(3,560,2.0E+02,'21529',red,'ridge -borderwidth 5').
current_state(4,680,-5.8E+02,'21530',red,'ridge -borderwidth 5').
current_state(6,800,-1.3E+03,'21531',red,'ridge -borderwidth 5').
current_state(9,920,-1.42E+03,'21532',red,'ridge -borderwidth 5').
current_state(14,1040,-1.42E+03,'21533',red,'ridge -borderwidth 5').
current_state(18,1160,-1.42E+03,'21534',red,'ridge -borderwidth 5').
current_state(22,1280,-1.42E+03,'21535',red,'ridge -borderwidth 5').
current_state(26,1400,-2.02E+03,'21536',red,'ridge -borderwidth 5').
current_state(42,1520,-2.08E+03,'21537',red,'ridge -borderwidth 5').
current_state(58,1640,-2.08E+03,'21538',red,'ridge -borderwidth 5').
current_state(43,1520,-1.96E+03,'21539',red,'ridge -borderwidth 5').
current_state(27,1400,-1.78E+03,'21540',red,'ridge -borderwidth 5').
current_state(44,1520,-1.78E+03,'21541',red,'ridge -borderwidth 5').
current_state(59,1640,-1.84E+03,'21542',red,'ridge -borderwidth 5').
current_state(86,1760,-1.84E+03,'21543',red,'ridge -borderwidth 5').
current_state(101,1880,-1.84E+03,'21544',red,'ridge -borderwidth 5').
current_state(116,2000,-1.84E+03,'21545',red,'ridge -borderwidth 5').
current_state(60,1640,-1.72E+03,'21546',red,'ridge -borderwidth 5').
current_state(28,1400,-1.42E+03,'21547',red,'ridge -borderwidth 5').
current_state(45,1520,-1.42E+03,'21548',red,'ridge -borderwidth 5').
current_state(61,1640,-1.54E+03,'21549',red,'ridge -borderwidth 5').
current_state(87,1760,-1.54E+03,'21550',red,'ridge -borderwidth 5').
current_state(102,1880,-1.6E+03,'21551',red,'ridge -borderwidth 5').
current_state(103,1880,-1.48E+03,'21552',red,'ridge -borderwidth 5').
current_state(62,1640,-1.36E+03,'21553',red,'ridge -borderwidth 5').
current_state(88,1760,-1.36E+03,'21554',red,'ridge -borderwidth 5').
current_state(104,1880,-1.36E+03,'21555',red,'ridge -borderwidth 5').
current_state(117,2000,-1.36E+03,'21556',red,'ridge -borderwidth 5').
current_state(124,2120,-1.36E+03,'21557',red,'ridge -borderwidth 5').
current_state(63,1640,-1.24E+03,'21558',red,'ridge -borderwidth 5').
current_state(29,1400,-1.0E+03,'21559',red,'ridge -borderwidth 5').
current_state(46,1520,-1.0E+03,'21560',red,'ridge -borderwidth 5').
current_state(64,1640,-1.12E+03,'21561',red,'ridge -borderwidth 5').
current_state(65,1640,-1.0E+03,'21562',red,'ridge -borderwidth 5').
current_state(89,1760,-1.0E+03,'21563',red,'ridge -borderwidth 5').
current_state(66,1640,-8.8E+02,'21564',red,'ridge -borderwidth 5').
current_state(90,1760,-8.8E+02,'21565',red,'ridge -borderwidth 5').
current_state(105,1880,-8.8E+02,'21566',red,'ridge -borderwidth 5').
current_state(118,2000,-8.8E+02,'21567',red,'ridge -borderwidth 5').
current_state(30,1400,-7.6E+02,'21568',red,'ridge -borderwidth 5').
current_state(10,920,-6.4E+02,'21569',red,'ridge -borderwidth 5').
current_state(15,1040,-6.4E+02,'21570',red,'ridge -borderwidth 5').
current_state(19,1160,-6.4E+02,'21571',red,'ridge -borderwidth 5').
current_state(23,1280,-6.4E+02,'21572',red,'ridge -borderwidth 5').
current_state(31,1400,-6.4E+02,'21573',red,'ridge -borderwidth 5').
current_state(47,1520,-6.4E+02,'21574',red,'ridge -borderwidth 5').
current_state(67,1640,-6.4E+02,'21575',red,'ridge -borderwidth 5').
current_state(127,1760,-6.4E+02,'21576','SteelBlue1',flat).
current_state(11,920,-5.2E+02,'21577',red,'ridge -borderwidth 5').
current_state(7,800,2.6E+02,'21578',red,'ridge -borderwidth 5').
current_state(12,920,2.6E+02,'21579',red,'ridge -borderwidth 5').
current_state(16,1040,2.6E+02,'21580',red,'ridge -borderwidth 5').
current_state(20,1160,2.6E+02,'21581',red,'ridge -borderwidth 5').
current_state(24,1280,2.6E+02,'21582',red,'ridge -borderwidth 5').
current_state(32,1400,-3.4E+02,'21583',red,'ridge -borderwidth 5').
current_state(48,1520,-4.0E+02,'21584',red,'ridge -borderwidth 5').
current_state(68,1640,-4.0E+02,'21585',red,'ridge -borderwidth 5').
current_state(49,1520,-2.8E+02,'21586',red,'ridge -borderwidth 5').
current_state(33,1400,-1.0E+02,'21587',red,'ridge -borderwidth 5').
current_state(50,1520,-1.0E+02,'21588',red,'ridge -borderwidth 5').
current_state(69,1640,-1.6E+02,'21589',red,'ridge -borderwidth 5').
current_state(91,1760,-1.6E+02,'21590',red,'ridge -borderwidth 5').
current_state(106,1880,-1.6E+02,'21591',red,'ridge -borderwidth 5').
current_state(119,2000,-1.6E+02,'21592',red,'ridge -borderwidth 5').
current_state(70,1640,-4.0E+01,'21593',red,'ridge -borderwidth 5').
current_state(34,1400,2.6E+02,'21594',red,'ridge -borderwidth 5').
current_state(51,1520,2.6E+02,'21595',red,'ridge -borderwidth 5').
current_state(71,1640,1.4E+02,'21596',red,'ridge -borderwidth 5').
current_state(92,1760,1.4E+02,'21597',red,'ridge -borderwidth 5').
current_state(107,1880,8.0E+01,'21598',red,'ridge -borderwidth 5').
current_state(108,1880,2.0E+02,'21599',red,'ridge -borderwidth 5').
current_state(72,1640,3.2E+02,'21600',red,'ridge -borderwidth 5').
current_state(93,1760,3.2E+02,'21601',red,'ridge -borderwidth 5').
current_state(109,1880,3.2E+02,'21602',red,'ridge -borderwidth 5').
current_state(120,2000,3.2E+02,'21603',red,'ridge -borderwidth 5').
current_state(125,2120,3.2E+02,'21604',red,'ridge -borderwidth 5').
current_state(73,1640,4.4E+02,'21605',red,'ridge -borderwidth 5').
current_state(35,1400,6.8E+02,'21606',red,'ridge -borderwidth 5').
current_state(52,1520,6.8E+02,'21607',red,'ridge -borderwidth 5').
current_state(74,1640,5.6E+02,'21608',red,'ridge -borderwidth 5').
current_state(75,1640,6.8E+02,'21609',red,'ridge -borderwidth 5').
current_state(94,1760,6.8E+02,'21610',red,'ridge -borderwidth 5').
current_state(76,1640,8.0E+02,'21611',red,'ridge -borderwidth 5').
current_state(95,1760,8.0E+02,'21612',red,'ridge -borderwidth 5').
current_state(110,1880,8.0E+02,'21613',red,'ridge -borderwidth 5').
current_state(121,2000,8.0E+02,'21614',red,'ridge -borderwidth 5').
current_state(36,1400,9.2E+02,'21615',red,'ridge -borderwidth 5').
current_state(5,680,1.76E+03,'21616',red,'ridge -borderwidth 5').
current_state(8,800,1.76E+03,'21617',red,'ridge -borderwidth 5').
current_state(13,920,1.76E+03,'21618',red,'ridge -borderwidth 5').
current_state(17,1040,1.76E+03,'21619',red,'ridge -borderwidth 5').
current_state(21,1160,1.76E+03,'21620',red,'ridge -borderwidth 5').
current_state(25,1280,1.76E+03,'21621',red,'ridge -borderwidth 5').
current_state(37,1400,1.1E+03,'21622',red,'ridge -borderwidth 5').
current_state(53,1520,1.04E+03,'21623',red,'ridge -borderwidth 5').
current_state(77,1640,1.04E+03,'21624',red,'ridge -borderwidth 5').
current_state(54,1520,1.16E+03,'21625',red,'ridge -borderwidth 5').
current_state(38,1400,1.34E+03,'21626',red,'ridge -borderwidth 5').
current_state(55,1520,1.34E+03,'21627',red,'ridge -borderwidth 5').
current_state(78,1640,1.28E+03,'21628',red,'ridge -borderwidth 5').
current_state(79,1640,1.4E+03,'21629',red,'ridge -borderwidth 5').
current_state(39,1400,1.7E+03,'21630',red,'ridge -borderwidth 5').
current_state(56,1520,1.7E+03,'21631',red,'ridge -borderwidth 5').
current_state(80,1640,1.58E+03,'21632',red,'ridge -borderwidth 5').
current_state(96,1760,1.58E+03,'21633',red,'ridge -borderwidth 5').
current_state(111,1880,1.52E+03,'21634',red,'ridge -borderwidth 5').
current_state(112,1880,1.64E+03,'21635',red,'ridge -borderwidth 5').
current_state(81,1640,1.76E+03,'21636',red,'ridge -borderwidth 5').
current_state(97,1760,1.76E+03,'21637',red,'ridge -borderwidth 5').
current_state(113,1880,1.76E+03,'21638',red,'ridge -borderwidth 5').
current_state(122,2000,1.76E+03,'21639',red,'ridge -borderwidth 5').
current_state(126,2120,1.76E+03,'21640',red,'ridge -borderwidth 5').
current_state(82,1640,1.88E+03,'21641',red,'ridge -borderwidth 5').
current_state(40,1400,2.18E+03,'21642',red,'ridge -borderwidth 5').
current_state(57,1520,2.18E+03,'21643',red,'ridge -borderwidth 5').
current_state(83,1640,2.0E+03,'21644',red,'ridge -borderwidth 5').
current_state(84,1640,2.18E+03,'21645',red,'ridge -borderwidth 5').
current_state(98,1760,2.12E+03,'21646',red,'ridge -borderwidth 5').
current_state(99,1760,2.24E+03,'21647',red,'ridge -borderwidth 5').
current_state(114,1880,2.24E+03,'21648',red,'ridge -borderwidth 5').
current_state(85,1640,2.36E+03,'21649',red,'ridge -borderwidth 5').
current_state(100,1760,2.36E+03,'21650',red,'ridge -borderwidth 5').
current_state(115,1880,2.36E+03,'21651',red,'ridge -borderwidth 5').
current_state(123,2000,2.36E+03,'21652',red,'ridge -borderwidth 5').
current_state(41,1400,2.48E+03,'21653',red,'ridge -borderwidth 5').
current_state(129,320,2.6E+03,'21654','SteelBlue1',flat).
:- fsa_globals:fsa_global_set(v_angle,0.15).
