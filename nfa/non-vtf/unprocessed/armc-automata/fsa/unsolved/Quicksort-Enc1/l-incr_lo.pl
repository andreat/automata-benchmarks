%% Automatically generated by FSA Utilities.
%% For more info, cf. http://www.let.rug.nl/~vannoord/Fsa/

fa(
%begin sigma and symbols
t(fsa_preds,fsa_preds),
%end sigma and symbols
13, % number of states
[ % begin start states
0
], % end start states
[ % begin final states
1,
2,
3
], % end final states
[ % begin transitions
trans(0,l1/l2,11),
trans(0,l2/l2,11),
trans(1,'00110'/'00110',4),
trans(1,'00111'/'00111',4),
trans(1,'01110'/'01110',4),
trans(1,'01111'/'01111',4),
trans(1,'10110'/'10110',4),
trans(1,'10111'/'10111',4),
trans(1,'11110'/'11110',4),
trans(1,'11111'/'11111',4),
trans(1,qs0/qs0,2),
trans(1,qs1/qs1,2),
trans(1,qs2/qs2,2),
trans(1,qs3/qs3,2),
trans(2,$@(not_in([]))/ $@(not_in([])),2),
trans(3,'00110'/'00010',5),
trans(3,'00111'/'00011',5),
trans(3,'01110'/'01010',5),
trans(3,'01111'/'01011',5),
trans(3,'10110'/'10010',5),
trans(3,'10111'/'10011',5),
trans(3,'11110'/'11010',5),
trans(3,'11111'/'11011',5),
trans(3,qs0/qs0,2),
trans(3,qs1/qs1,2),
trans(3,qs2/qs2,2),
trans(3,qs3/qs3,2),
trans(4,'00000'/'00000',1),
trans(4,'00001'/'00001',1),
trans(4,'00010'/'00010',1),
trans(4,'00011'/'00011',1),
trans(4,'00100'/'00100',1),
trans(4,'00101'/'00101',1),
trans(4,'00110'/'00110',1),
trans(4,'00111'/'00111',1),
trans(4,'01000'/'01000',1),
trans(4,'01001'/'01001',1),
trans(4,'01010'/'01010',1),
trans(4,'01011'/'01011',1),
trans(4,'01100'/'01100',1),
trans(4,'01101'/'01101',1),
trans(4,'01110'/'01110',1),
trans(4,'01111'/'01111',1),
trans(4,'10000'/'10000',1),
trans(4,'10001'/'10001',1),
trans(4,'10010'/'10010',1),
trans(4,'10011'/'10011',1),
trans(4,'10100'/'10100',1),
trans(4,'10101'/'10101',1),
trans(4,'10110'/'10110',1),
trans(4,'10111'/'10111',1),
trans(4,'11000'/'11000',1),
trans(4,'11001'/'11001',1),
trans(4,'11010'/'11010',1),
trans(4,'11011'/'11011',1),
trans(4,'11100'/'11100',1),
trans(4,'11101'/'11101',1),
trans(4,'11110'/'11110',1),
trans(4,'11111'/'11111',1),
trans(5,'00000'/'00000',3),
trans(5,'00001'/'00001',3),
trans(5,'00010'/'00010',3),
trans(5,'00011'/'00011',3),
trans(5,'00100'/'00100',3),
trans(5,'00101'/'00101',3),
trans(5,'00110'/'00110',3),
trans(5,'00111'/'00111',3),
trans(5,'01000'/'01000',3),
trans(5,'01001'/'01001',3),
trans(5,'01010'/'01010',3),
trans(5,'01011'/'01011',3),
trans(5,'01100'/'01100',3),
trans(5,'01101'/'01101',3),
trans(5,'01110'/'01110',3),
trans(5,'01111'/'01111',3),
trans(5,'10000'/'10000',3),
trans(5,'10001'/'10001',3),
trans(5,'10010'/'10010',3),
trans(5,'10011'/'10011',3),
trans(5,'10100'/'10100',3),
trans(5,'10101'/'10101',3),
trans(5,'10110'/'10110',3),
trans(5,'10111'/'10111',3),
trans(5,'11000'/'11000',3),
trans(5,'11001'/'11001',3),
trans(5,'11010'/'11010',3),
trans(5,'11011'/'11011',3),
trans(5,'11100'/'11100',3),
trans(5,'11101'/'11101',3),
trans(5,'11110'/'11110',3),
trans(5,'11111'/'11111',3),
trans(6,'00000'/'00000',7),
trans(6,'00000'/'00100',4),
trans(6,'00001'/'00001',7),
trans(6,'00001'/'00101',4),
trans(6,'00010'/'00010',8),
trans(6,'00010'/'00110',4),
trans(6,'00011'/'00011',8),
trans(6,'00011'/'00111',4),
trans(6,'00110'/'00010',5),
trans(6,'00111'/'00011',5),
trans(6,'01000'/'01000',7),
trans(6,'01000'/'01100',4),
trans(6,'01001'/'01001',7),
trans(6,'01001'/'01101',4),
trans(6,'01010'/'01010',8),
trans(6,'01010'/'01110',4),
trans(6,'01011'/'01011',8),
trans(6,'01011'/'01111',4),
trans(6,'01110'/'01010',5),
trans(6,'01111'/'01011',5),
trans(6,'10000'/'10000',7),
trans(6,'10000'/'10100',4),
trans(6,'10001'/'10001',7),
trans(6,'10001'/'10101',4),
trans(6,'10010'/'10010',8),
trans(6,'10010'/'10110',4),
trans(6,'10011'/'10011',8),
trans(6,'10011'/'10111',4),
trans(6,'10110'/'10010',5),
trans(6,'10111'/'10011',5),
trans(6,'11000'/'11000',7),
trans(6,'11000'/'11100',4),
trans(6,'11001'/'11001',7),
trans(6,'11001'/'11101',4),
trans(6,'11010'/'11010',8),
trans(6,'11010'/'11110',4),
trans(6,'11011'/'11011',8),
trans(6,'11011'/'11111',4),
trans(6,'11110'/'11010',5),
trans(6,'11111'/'11011',5),
trans(7,'00000'/'00000',9),
trans(7,'00001'/'00001',9),
trans(7,'00010'/'00010',9),
trans(7,'00011'/'00011',9),
trans(7,'00100'/'00100',9),
trans(7,'00101'/'00101',9),
trans(7,'00110'/'00110',9),
trans(7,'00111'/'00111',9),
trans(7,'01000'/'01000',9),
trans(7,'01001'/'01001',9),
trans(7,'01010'/'01010',9),
trans(7,'01011'/'01011',9),
trans(7,'01100'/'01100',9),
trans(7,'01101'/'01101',9),
trans(7,'01110'/'01110',9),
trans(7,'01111'/'01111',9),
trans(7,'10000'/'10000',9),
trans(7,'10001'/'10001',9),
trans(7,'10010'/'10010',9),
trans(7,'10011'/'10011',9),
trans(7,'10100'/'10100',9),
trans(7,'10101'/'10101',9),
trans(7,'10110'/'10110',9),
trans(7,'10111'/'10111',9),
trans(7,'11000'/'11000',9),
trans(7,'11001'/'11001',9),
trans(7,'11010'/'11010',9),
trans(7,'11011'/'11011',9),
trans(7,'11100'/'11100',9),
trans(7,'11101'/'11101',9),
trans(7,'11110'/'11110',9),
trans(7,'11111'/'11111',9),
trans(8,'00000'/'00000',12),
trans(8,'00001'/'00001',12),
trans(8,'00010'/'00010',12),
trans(8,'00011'/'00011',12),
trans(8,'00100'/'00100',12),
trans(8,'00101'/'00101',12),
trans(8,'00110'/'00110',12),
trans(8,'00111'/'00111',12),
trans(8,'01000'/'01000',12),
trans(8,'01001'/'01001',12),
trans(8,'01010'/'01010',12),
trans(8,'01011'/'01011',12),
trans(8,'01100'/'01100',12),
trans(8,'01101'/'01101',12),
trans(8,'01110'/'01110',12),
trans(8,'01111'/'01111',12),
trans(8,'10000'/'10000',12),
trans(8,'10001'/'10001',12),
trans(8,'10010'/'10010',12),
trans(8,'10011'/'10011',12),
trans(8,'10100'/'10100',12),
trans(8,'10101'/'10101',12),
trans(8,'10110'/'10110',12),
trans(8,'10111'/'10111',12),
trans(8,'11000'/'11000',12),
trans(8,'11001'/'11001',12),
trans(8,'11010'/'11010',12),
trans(8,'11011'/'11011',12),
trans(8,'11100'/'11100',12),
trans(8,'11101'/'11101',12),
trans(8,'11110'/'11110',12),
trans(8,'11111'/'11111',12),
trans(9,'00000'/'00000',7),
trans(9,'00000'/'00100',4),
trans(9,'00001'/'00001',7),
trans(9,'00001'/'00101',4),
trans(9,'00010'/'00010',8),
trans(9,'00010'/'00110',4),
trans(9,'00011'/'00011',8),
trans(9,'00011'/'00111',4),
trans(9,'01000'/'01000',7),
trans(9,'01000'/'01100',4),
trans(9,'01001'/'01001',7),
trans(9,'01001'/'01101',4),
trans(9,'01010'/'01010',8),
trans(9,'01010'/'01110',4),
trans(9,'01011'/'01011',8),
trans(9,'01011'/'01111',4),
trans(9,'10000'/'10000',7),
trans(9,'10000'/'10100',4),
trans(9,'10001'/'10001',7),
trans(9,'10001'/'10101',4),
trans(9,'10010'/'10010',8),
trans(9,'10010'/'10110',4),
trans(9,'10011'/'10011',8),
trans(9,'10011'/'10111',4),
trans(9,'11000'/'11000',7),
trans(9,'11000'/'11100',4),
trans(9,'11001'/'11001',7),
trans(9,'11001'/'11101',4),
trans(9,'11010'/'11010',8),
trans(9,'11010'/'11110',4),
trans(9,'11011'/'11011',8),
trans(9,'11011'/'11111',4),
trans(10,qs0/qs0,6),
trans(10,qs1/qs1,6),
trans(10,qs2/qs2,6),
trans(10,qs3/qs3,6),
trans(11,qs1/qs1,10),
trans(12,'00010'/'00010',8),
trans(12,'00010'/'00110',4),
trans(12,'00011'/'00011',8),
trans(12,'00011'/'00111',4),
trans(12,'01010'/'01010',8),
trans(12,'01010'/'01110',4),
trans(12,'01011'/'01011',8),
trans(12,'01011'/'01111',4),
trans(12,'10010'/'10010',8),
trans(12,'10010'/'10110',4),
trans(12,'10011'/'10011',8),
trans(12,'10011'/'10111',4),
trans(12,'11010'/'11010',8),
trans(12,'11010'/'11110',4),
trans(12,'11011'/'11011',8),
trans(12,'11011'/'11111',4)
], % end transitions
[]). % jumps

:- fsa_globals:fsa_global_set(regex,o(file('l-test-lo<=hi.pl'),file('l-do-incr_lo.pl'))).
:- dynamic current_state/6.
current_state(0,200,2.0E+02,'15576',green,flat).
current_state(11,320,2.0E+02,'15577','SteelBlue1',flat).
current_state(10,440,2.0E+02,'15578','SteelBlue1',flat).
current_state(6,560,2.0E+02,'15579','SteelBlue1',flat).
current_state(4,680,2.0E+01,'15580','SteelBlue1',flat).
current_state(1,800,2.0E+01,'15581',red,'ridge -borderwidth 5').
current_state(2,920,2.0E+01,'15582',red,'ridge -borderwidth 5').
current_state(5,680,1.4E+02,'15583','SteelBlue1',flat).
current_state(3,800,1.4E+02,'15584',red,'ridge -borderwidth 5').
current_state(7,680,2.6E+02,'15585','SteelBlue1',flat).
current_state(9,800,2.6E+02,'15586','SteelBlue1',flat).
current_state(8,680,3.8E+02,'15587','SteelBlue1',flat).
current_state(12,800,3.8E+02,'15588','SteelBlue1',flat).
:- fsa_globals:fsa_global_set(v_angle,0.15).
